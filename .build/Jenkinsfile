pipeline{

   //任何一个代理可用的机器就立即执行代码构建
   agent any
   //定义环境信息
   //定义流水线的加工流程
   //0.环境检查
   stages{
   stage('环境检查'){
   steps{
   sh 'printenv'
        echo '正在检查基本信息'
         sh 'echo $SSH_CONNECTION'
         sh 'java -version'
         sh 'git --version'
         sh 'docker version'
   }


   }

   //1.编译
   stage('代码编译'){
   agent {
          docker {image 'maven:3-alpine'}
        }
      steps{
      echo '编译......'
      sh  'pwd && ls -alh'
      sh  'mvn -v'
      sh 'mvn clean package -s
      "/var/jenkins_home/app_conf/maven/settings.xml"
      -Dmaven.test.skip=true '

      }
   }

   //2.测试
   stage('代码测试'){
      steps{
      echo '测试......'


      }
   }

   //3.打包
   stage('代码打包'){
      steps{
       echo '打包......'
       }
   }

   //4.部署
   stage('代码部署'){
      steps{
        echo '部署......'
        }
   }

   }
}